package main

import (
	"encoding/json"
	"fmt"
	"flag"
	"os"
	"net/http"
	"io/ioutil"
	"strings"
	"strconv"
	"time"
	"encoding/base64"
	"github.com/360EntSecGroup-Skylar/excelize"
)



var (

	banner   = `

	   ___          ___            ____    _____      
	 / ___\       / ___\          /\  _ \ /\  __ \    
	/\ \__/  ___ /\ \__/   __     \ \ \L\_\ \ \/\ \   
	\ \  __\/ __ \ \  __\/ __ \    \ \ \L_L\ \ \ \ \  
	 \ \ \_/\ \L\ \ \ \_/\ \L\.\_   \ \ \/, \ \ \_\ \ 
	  \ \_\\ \____/\ \_\\ \__/.\_\   \ \____/\ \_____\
	   \/_/ \/___/  \/_/ \/__/\/_/    \/___/  \/_____/  

				fofa_GO version:1.0.1 @shangzeng
	`

	email    =  "这里填写你的邮箱！"
	api_key  =  "这里填写你的API！"

	f = "ip,host,port,protocol,country,region,city,title,domain"
	exclename = "结果"+fmt.Sprintf("%d",time.Now().Unix())+".xlsx"
	ipname = "IP"+fmt.Sprintf("%d",time.Now().Unix())+".txt"

	h bool
	l bool
	e bool
	t bool
	xray bool
	q string
)


type Fofaresponse struct {
	Mode    string     `json:"mode"`
	Error   bool       `json:"error"`
	Query   string     `json:"query"`
	Page    int        `json:"page"`
	Size    int        `json:"size"`
	Results [][]string `json:"results"`
}

type AutoGenerated []string


func excle360(IP string, domain string, port string, xieyi string, country string,city string, region string, information string, Fdomain string, listnumber int, f *excelize.File, exclename string ) {
	list1 := fmt.Sprintf("A%d", listnumber+2)
	list2 := fmt.Sprintf("B%d", listnumber+2)
	list3 := fmt.Sprintf("C%d", listnumber+2)
	list4 := fmt.Sprintf("D%d", listnumber+2)
	list5 := fmt.Sprintf("E%d", listnumber+2)
	list6 := fmt.Sprintf("F%d", listnumber+2)
	list7 := fmt.Sprintf("G%d", listnumber+2)
	list8 := fmt.Sprintf("H%d", listnumber+2)
	list9 := fmt.Sprintf("I%d", listnumber+2)

	f.SetCellValue("Sheet1",list1,IP)
	f.SetCellValue("Sheet1",list2,domain)
	f.SetCellValue("Sheet1",list3,port)
	f.SetCellValue("Sheet1",list4,xieyi)
	f.SetCellValue("Sheet1",list5,country)
	f.SetCellValue("Sheet1",list6,city)
	f.SetCellValue("Sheet1",list7,region)
	f.SetCellValue("Sheet1",list8,information)
	f.SetCellValue("Sheet1",list9,Fdomain)

	if err := f.SaveAs(exclename); err != nil {
        fmt.Println(err)
    }
}


func init() {
	flag.BoolVar(&h, "h", false, "帮助")
	flag.BoolVar(&l, "l", false, "-l 获取历史数据，默认为false")
	flag.StringVar(&q, "q", "", "FOFA 查询语句:注意，双引号需要转译")
	flag.BoolVar(&e, "e", false, "-e 在本地生成excle 文档 【无-e,-t参数只显示IP在命令行中】")
	flag.BoolVar(&t, "t", false, "-t 在本地生成只有ip的txt文件【无-e,-t参数只显示IP在命令行中】")
	flag.BoolVar(&xray, "xray", false, "-fofa 只能在-t 生成txt文件后使用，对文件内IP进行服务器扫描并生成html")
	flag.Usage = usage
}



func usage() {
    flag.PrintDefaults()
}




func fofa_requests(url string) []byte {
	resp, err := http.Get(url)
	resp.Header.Add("User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)")
	defer resp.Body.Close()
	if err != nil {
		fmt.Println("HTTP GET ",err)
		os.Exit(0)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("HTTP READ ",err)
		os.Exit(0)
	}
	return body

}

func zhuanhuan(zhuan []string) string {
	str2 := strings.Join(zhuan, " ")
	return str2
}



func txtip(ip string, ipname string, port string) {

	fd,_:=os.OpenFile(ipname,os.O_RDWR|os.O_CREATE|os.O_APPEND,0644)

	//buf3:=[]byte("http://")
	//fd.Write(buf3)

	buf:=[]byte(ip)
	fd.Write(buf)

	buf2:=[]byte(":")
	fd.Write(buf2)

	buf4:=[]byte(port)
	fd.Write(buf4)

	buf1:=[]byte("\n")
	fd.Write(buf1)	
	fd.Close()

}








func main() {
	fmt.Println(banner)
	flag.Parse()
	fmt.Fprintf(os.Stderr, `Informations:
`)
	if h {
        flag.Usage()
    }

	if q == ""  {
		fmt.Println("\033[33m \033[20m[缺少搜索语句！] ：-q <options> -h <help>\033[0m")
		os.Exit(0)
	}




	//fmt.Println("\033[32m \033[35m[注意]:\033[0m","内测版本")
	fmt.Println("\033[33m \033[33m[注意]:\033[0m","搜索语句的中的双引号等于号空格等符号需要转译，用反引号")
	base64decode := base64.StdEncoding.EncodeToString([]byte(q))
	history := strconv.FormatBool(l)
	url := fmt.Sprintf("https://fofa.so/api/v1/search/all?email=%s&key=%s&fields=%s&page=1&qbase64=%s&full=%s",email,api_key,f,base64decode,history)
	test := fofa_requests(url)



	//默认输出模式：只显示IP在命令行中
	if t == false && e == false {


		var fofajson Fofaresponse
		err := json.Unmarshal(test, &fofajson)
		if err != nil {
		panic(err)	
	}
	fmt.Println("\033[33m \033[38m[搜索语句]:\033[0m",fofajson.Query)
	fmt.Println("\033[33m \033[36m[搜索数量]:\033[0m",fofajson.Size)

	for _,hang := range fofajson.Results{
		data, err := json.Marshal(hang)
		if err != nil {
			panic(err)
		}
		var fofalistjson []string
		errs := json.Unmarshal(data, &fofalistjson)
		if errs != nil {
			panic(err)
		}

		fmt.Printf("|%-18s|%-5s|%-28s|%10s\n",zhuanhuan(fofalistjson[0:1]),zhuanhuan(fofalistjson[2:3]),zhuanhuan(fofalistjson[1:2]), zhuanhuan(fofalistjson[7:8]))
	}
























	}



	if t == true {

		//urltxt :=  fmt.Sprintf("https://fofa.so/api/v1/search/all?email=%s&key=%s&fields=ip&page=1&qbase64=%s&full=%s",email,api_key,base64decode,history)
		//fmt.Println(urltxt)
		var fofajson Fofaresponse
		err := json.Unmarshal(test, &fofajson)
		if err != nil {
		panic(err)	
	}
	fmt.Println("\033[33m \033[38m[搜索语句]:\033[0m",fofajson.Query)
	fmt.Println("\033[33m \033[36m[搜索数量]:\033[0m",fofajson.Size)
	for _,hang := range fofajson.Results{
		data, err := json.Marshal(hang)
		if err != nil {
			panic(err)
		}
		var fofalistjson []string
		errs := json.Unmarshal(data, &fofalistjson)
		if errs != nil {
			panic(err)
		}
		//fmt.Println(zhuanhuan(fofalistjson[0:1]))
		txtip(zhuanhuan(fofalistjson[0:1]),ipname,zhuanhuan(fofalistjson[2:3]))



	}
	fmt.Println("\033[30m \033[31m[完成！ 存储文件名为]:\033[0m",ipname)

	// 如果存在 -xray 命令 则调用 xray 进行扫描
	if xray == true {
		fmt.Println(ipname,"准备就绪！")
	}






	}


	if e == true {




	var fofajson Fofaresponse
	err := json.Unmarshal(test, &fofajson)
	if err != nil {
		panic(err)	
	}
	fmt.Println("\033[33m \033[38m[搜索语句]:\033[0m",fofajson.Query)
	fmt.Println("\033[33m \033[36m[搜索数量]:\033[0m",fofajson.Size)
	f := excelize.NewFile()
	f.SetCellValue("Sheet1", "A1", "IP")
	f.SetCellValue("Sheet1", "B1", "域名")
	f.SetCellValue("Sheet1", "C1", "端口")
	f.SetCellValue("Sheet1", "D1", "协议")
	f.SetCellValue("Sheet1", "E1", "国家")
	f.SetCellValue("Sheet1", "F1", "省")
	f.SetCellValue("Sheet1", "G1", "城市")
	f.SetCellValue("Sheet1", "H1", "信息")
	f.SetCellValue("Sheet1", "I1", "主域名")
	//设置宽度
	f.SetColWidth("Sheet1", "A", "B", 30)
	f.SetColWidth("Sheet1", "C", "G", 15)
	f.SetColWidth("Sheet1", "H", "H", 100)
	f.SetColWidth("Sheet1", "I", "I", 15)

			
	if err := f.SaveAs(exclename); err != nil {

		fmt.Println(err)
   	}


	for number,hang := range fofajson.Results{
			data, err := json.Marshal(hang)
			if err != nil {
				panic(err)
			}

			var fofalistjson []string
			errs := json.Unmarshal(data, &fofalistjson)
			if errs != nil {
			panic(err)
			}

			excle360(zhuanhuan(fofalistjson[0:1]),zhuanhuan(fofalistjson[1:2]),zhuanhuan(fofalistjson[2:3]),zhuanhuan(fofalistjson[3:4]),zhuanhuan(fofalistjson[4:5]),zhuanhuan(fofalistjson[5:6]),zhuanhuan(fofalistjson[6:7]),zhuanhuan(fofalistjson[7:8]),zhuanhuan(fofalistjson[8:9]),number,f,exclename)

	}
	fmt.Println("\033[30m \033[31m[完成！ 存储文件名为]:\033[0m",exclename)
}


}


	